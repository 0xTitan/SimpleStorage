{"version":3,"sources":["getWeb3.js","components/EventsComponent.jsx","components/AccoutInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Events","addresses","map","address","returnValues","AccountInfo","App","state","storageValue","accounts","contract","inputValue","newEvents","pastEvents","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","methods","get","call","response","optionsNew","filter","value","fromBlock","events","dataChanged","event","setState","optionsPast","toBlock","getPastEvents","error","onSubmit","set","send","from","transact","_addr","this","className","AccoutInfo","type","id","onChange","evt","updateInputValue","onClick","val","target","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e71afc4.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","function Events({ addresses }) {\n  console.log(\"in event\");\n  console.log(addresses);\n  return (\n    <div>\n      {addresses.map((address) => (\n        <p>{address.returnValues[0]}</p>\n      ))}\n    </div>\n  );\n}\n\nexport default Events;\n","function AccountInfo({ address }) {\n  return <h2>{address}</h2>;\n}\n\nexport default AccountInfo;\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Events from \"./components/EventsComponent\";\nimport AccoutInfo from \"./components/AccoutInfo\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    addresses: null,\n    inputValue: \"\",\n    newEvents: [],\n    pastEvents: [],\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      console.log(deployedNetwork && deployedNetwork.address);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      const response = await instance.methods.get().call();\n\n      let optionsNew = {\n        filter: {\n          value: [],\n        },\n        fromBlock: \"latest\",\n      };\n\n      instance.events.dataChanged(optionsNew).on(\"data\", (event) => {\n        console.log(event);\n        this.setState({\n          newEvents: [event, ...this.state.newEvents],\n        });\n      });\n\n      let optionsPast = {\n        filter: {\n          value: [],\n        },\n        fromBlock: 0,\n        toBlock: \"latest\",\n      };\n\n      instance.getPastEvents(\"dataChanged\", optionsPast, (error, events) => {\n        console.log(\"pastEvent\");\n        console.log(events);\n        this.setState({\n          pastEvents: events,\n        });\n      });\n\n      //other method to get pastEvent\n      // const listAddress = await instance.getPastEvents(\n      //   \"dataChanged\",\n      //   optionsPast\n      // );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        storageValue: response,\n        web3,\n        accounts,\n        contract: instance,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go! address connnected is :</h1>\n        <AccoutInfo address={this.state.accounts[0]} />\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <br></br>\n\n        <div>\n          <input\n            type=\"text\"\n            id=\"inputValue\"\n            value={this.state.inputValue}\n            onChange={(evt) => this.updateInputValue(evt)}\n          ></input>\n          <button onClick={this.onSubmit}>Set</button>\n        </div>\n\n        <div>\n          <h2>New addresses which interact with the contract :</h2>\n          <Events addresses={this.state.newEvents} />\n        </div>\n        <div>\n          <h2>Past addresses which interact with the contract :</h2>\n          <Events addresses={this.state.pastEvents} />\n        </div>\n      </div>\n    );\n  }\n\n  onSubmit = async () => {\n    //recup accounts, contrat et inputValue\n    const { accounts, contract, inputValue } = this.state;\n    // Interaction avec le smart contract pour set la valeur\n    const transact = await contract.methods\n      .set(inputValue)\n      .send({ from: accounts[0] });\n\n    //get event from transaction.0\n    console.log(\n      \"Ladresse est  :\" + transact.events.dataChanged.returnValues._addr\n    );\n    //lecture valeur\n    const response = await contract.methods.get().call();\n    //update du set -> maj auto de l'UI\n    this.setState({ storageValue: response });\n  };\n\n  //update du state qui sera recup dans le onSubmit\n  updateInputValue(evt) {\n    const val = evt.target.value;\n    this.setState({\n      inputValue: val,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}